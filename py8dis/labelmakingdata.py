class LabelMakingData:
    def __init__(self, name, defined_as_runtime_addr, defined_in_move_id,
                             used_at_binary_addr, used_at_runtime_addr, used_in_move_id,
                             is_autogenerated, is_expression):
        self.name                   = name

        # Label definition
        self.defined_as_runtime_addr = defined_as_runtime_addr        # Must have a value
        self.defined_in_move_id      = defined_in_move_id             # Must have a value?

        # Where label is being used, if any
        self.used_at_binary_addr    = used_at_binary_addr       # Can be None if not referenced by binary
        self.used_at_runtime_addr   = used_at_runtime_addr      # Can be None if not referenced by binary
        self.used_in_move_id        = used_in_move_id           # Can be None if not referenced by binary

        self.is_autogenerated       = is_autogenerated
        self.is_expression          = False

    def in_range(self, start, end):
        return start <= self.used_at_runtime_addr < end

    def in_range_binary(self, start, end):
        return start <= self.used_at_binary_addr < end

    def in_move(self, used_in_move_id):
        return self.move_id == used_in_move_id

    def replace(self, from_, to):
        if self.name == from_:
            self.name = to
            return True
        elif isinstance(from_, int) and (from_ == self.label_runtime_addr):
            self.name = to
            return True
        return False

    def replace_binary(self, from_, to):
        if self.name == from_:
            self.name = to
            return True
        elif isinstance(from_, int) and (from_ == self.label_binary_addr):
            self.name = to
            return True
        return False

    def copy(self):
        return LabelMakingData(
            name=self.name,
            defined_as_runtime_addr=self.defined_as_runtime_addr,
            defined_in_move_id=self.defined_in_move_id,
            used_at_binary_addr=self.used_at_binary_addr,
            used_at_runtime_addr=self.used_at_runtime_addr,
            used_in_move_id=self.used_in_move_id,
            is_autogenerated=self.is_autogenerated,
            is_expression=self.is_expression
        )

    def __str__(self):
        return "label: {0} at runtime: {1} in move_id: {2} autogenerated:{3} expression:{4}".format(self.name, hex(self.defined_as_runtime_addr), self.defined_in_move_id, self.is_autogenerated, self.is_expression)

    def __repr__(self):
        return self.__str__()
