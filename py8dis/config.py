# TODO: Might be nice if memory_binary were an instance of a class which could assert its key is a BinaryAddr
memory_binary = [None] * 64*1024

# TODO: Move/tweak?
class MemoryRuntime(object):
    def __getitem__(self, key):
        import movemanager # TODO!?
        import utils # TODO!?
        assert utils.is_valid_addr(key)
        key = utils.RuntimeAddr(key)
        binary_address, _ = movemanager.r2b_checked(key)
        return memory_binary[binary_address]

# TODO: This perhaps "should" be called memory_runtime, but earlier versions just had
# memory and this is the main memory access for user code so probably reasonable to use
# short name for it.
memory = MemoryRuntime()

# New config variables should all have leading underscores.
_formatter                  = None
_lower_case                 = True
_hex_dump                   = True
_label_references           = True
_inline_comment_column      = 70
_indent_string              = " "*4
_hex_dump_max_bytes         = 3

# For backwards compatibility these old config variables don't have underscores.
# Best practice is to not access these directly, but access via the getters and setters below.
indent_loops                = False
blank_line_at_block_end     = True
loop_limit                  = 32        # TODO: Move into trace?
show_cpu_state              = False
show_autogenerated_labels   = True
show_char_literals          = True
show_all_labels             = False

def get_formatter():
    return _formatter

def set_formatter(f):
    global _formatter
    _formatter = f

def get_lower_case():
    return _lower_case

def set_lower_case(b):
    global _lower_case
    _lower_case = b

def get_hex_dump():
    return _hex_dump

def set_hex_dump(b):
    global _hex_dump
    _hex_dump = b

def get_label_references():
    return _label_references

def set_label_references(b):
    global _label_references
    _label_references = b

def get_inline_comment_column():
    return _inline_comment_column

def set_inline_comment_column(n):
    global _inline_comment_column
    _inline_comment_column = n

def get_indent_string():
    global _indent_string
    return _indent_string

def set_indent_string(s):
    global _indent_string
    _indent_string = s

def get_indent_loops():
    global indent_loops
    return indent_loops

def set_indent_loops(b):
    global _indent_loops
    _indent_loops = b

def get_blank_line_at_block_end():
    global blank_line_at_block_end
    return blank_line_at_block_end

def set_blank_line_at_block_end(b):
    global blank_line_at_block_end
    blank_line_at_block_end = b

def get_loop_limit():
    global loop_limit
    return loop_limit

def set_loop_limit(i):
    global loop_limit
    loop_limit = i

def get_show_cpu_state():
    global show_cpu_state
    return show_cpu_state

def set_show_cpu_state(b):
    global show_cpu_state
    show_cpu_state = b

def get_show_autogenerated_labels():
    global show_autogenerated_labels
    return show_autogenerated_labels

def set_show_autogenerated_labels(b):
    global show_autogenerated_labels
    show_autogenerated_labels = b

def get_show_char_literals():
    global show_char_literals
    return show_char_literals

def set_show_char_literals(b):
    global show_char_literals
    show_char_literals = b

def get_show_all_labels():
    global show_all_labels
    return show_all_labels

def set_show_all_labels(b):
    global show_all_labels
    show_all_labels = b

def get_hex_dump_max_bytes():
    global _hex_dump_max_bytes
    return _hex_dump_max_bytes

def set_hex_dump_max_bytes(i):
    global _hex_dump_max_bytes
    _hex_dump_max_bytes = i
